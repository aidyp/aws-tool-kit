AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys a proper webserver with all the bells and whistles"

Mappings:
  RegionMap:
    eu-west-1:
      HVM64: "ami-0f89681a05a3a9de7"

Parameters:
  DefaultCIDR:
    Type: String
    Default: "10.0.0.0/24"

  PubSubnet1:
    Type: String
    Default: "10.0.0.0/26"
  
  PubSubnet2:
    Type: String
    Default: "10.0.0.64/26"

  PrivSubnet1:
    Type: String
    Default: "10.0.0.128/26"

  PrivSubnet2:
    Type: String
    Default: "10.0.0.192/26"

  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'ID of the AMI'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # Create a VPC 
  WebServerVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref DefaultCIDR
      EnableDnsSupport: true 
      EnableDnsHostnames: true 
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "Webserver VPC"
          

  
  # 4 Subnets, 2 public, 2 private, for ALB, EC2s and NAT 
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
        AvailabilityZone: !Sub "${AWS::Region}a"
        VpcId: !Ref WebServerVPC
        CidrBlock: !Ref PrivSubnet1 
        Tags:
          - Key: Name
            Value: WebServerVPC-PrivateSubnet-1
  
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
        AvailabilityZone: !Sub "${AWS::Region}b"
        VpcId: !Ref WebServerVPC
        CidrBlock: !Ref PrivSubnet2
        Tags:
          - Key: Name
            Value: WebServerVPC-PrivateSubnet-2
          
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
        AvailabilityZone: !Sub "${AWS::Region}a"
        VpcId: !Ref WebServerVPC
        CidrBlock: !Ref PubSubnet1 
        Tags:
          - Key: Name
            Value: WebServerVPC-PublicSubnet-1
    
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
        AvailabilityZone: !Sub "${AWS::Region}b"
        VpcId: !Ref WebServerVPC
        CidrBlock: !Ref PubSubnet2
        Tags:
          - Key: Name
            Value: WebServerVPC-PublicSubnet-2




  # Application Load Balancer, Security Group, and Target Groups 

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref WebServerVPC
      Tags:
        - Key: Name 
          Value: alb-security-group

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer 
    Properties:
      IpAddressType: ipv4 
      Name: ALB-for-webserver
      Scheme: internet-facing 
      SecurityGroups:
        - !Ref ALBSecurityGroup 
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application 

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true 
      HealthCheckPath: /index.html 
      HealthCheckPort: '80' 
      HealthCheckProtocol: HTTP 
      Name: Webserver-Target-Group
      Port: 80
      Protocol: HTTP 
      VpcId: !Ref WebServerVPC

  ALBListener:
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP 
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ALBTargetGroup


  # Launch template -- change if you want to run a different kind of webserver
  # This one just tells you hello world and has some details about the instance
  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template 
      LaunchTemplateData:
        CreditSpecification:
          CpuCredits: "standard" 
        ImageId: !Ref AmiID 
        InstanceType: t2.micro 
        IamInstanceProfile:
          Arn: !GetAtt ASGInstanceProfile.Arn
        Monitoring:
          Enabled: true 
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
          - !Ref SSMSG # For Systems Manager -- gotta do it Proper!
        TagSpecifications:
            - ResourceType: instance 
              Tags:
                - Key: Name 
                  Value: webserver-inst
        UserData:
          Fn::Base64: | 
             #!/bin/bash -xe 

             yum update -y
             yum install -y httpd24
             echo "Welcome from the instance $(hostname -f" > /var/www/html/index.html
             service httpd start

  WebserverASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Webserver-Auto-Scale
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber 
        


  

  # Internet Gateway & NAT Gateway

  InternetGW: 
    Type: AWS::EC2::InternetGateway 
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WebServerVPC
      InternetGatewayId: !Ref InternetGW

  ASGInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - 
          Ref: WorkloadInstanceRole
        
  # Role for the webserver
  WorkloadInstanceRole:
    Type: AWS::IAM::Role 
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -  
            Effect: Allow 
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchFullAccess

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupDescription: Enable HTTP access via port 80 
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      VpcId: !Ref WebServerVPC
      Tags:
        - Key: Name 
          Value: web-server-sg

  # Endpoints and roles for SSM access
  SSMSG:
    Type: AWS::EC2::SecurityGroup 
    Properties: 
      GroupDescription: Allow all 
      VpcId: !Ref WebServerVPC 
      SecurityGroupIngress:
        - IpProtocol: '-1' 
          FromPort: -1 
          ToPort: -1 
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: ssm-sg


  SSMEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SSMSG
      ServiceName:
        !Join 
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ssm'
      SubnetIds:
        - !Ref PrivateSubnet1 
        - !Ref PrivateSubnet2 
      VpcId: !Ref WebServerVPC
      VpcEndpointType: Interface

  SSMMessagesEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: True
      SecurityGroupIds:
        - !Ref SSMSG
      ServiceName:
        !Join 
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ssmmessages'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2 
      VpcId: !Ref WebServerVPC
      VpcEndpointType: Interface


  EC2MessagesEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !Ref SSMSG
      ServiceName:
        !Join
          - ''
          - - 'com.amazonaws.'
            - !Ref 'AWS::Region'
            - '.ec2messages'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcId: !Ref WebServerVPC
      VpcEndpointType: Interface

  EC2EndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: True
      SecurityGroupIds:
        - !Ref SSMSG
      ServiceName:
        !Join 
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ec2'
      SubnetIds:
        - !Ref PrivateSubnet1 
        - !Ref PrivateSubnet2
      VpcId: !Ref WebServerVPC 
      VpcEndpointType: Interface 

Outputs:
  VPCID:
    Description: ID of the Web Server VPC 
    Value: !Ref WebServerVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  
  ALBDNSName:
    Description: The DNS name of the application load balancer 
    Value: !GetAtt ApplicationLoadBalancer.DNSName 